name: CI

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

env:
  IMAGE_NAME: code-typing-derby

concurrency:
  group:
    ${{ github.workflow }}-${{ github.ref_name }}-${{
    github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  build:
    name: "build image"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export (multistage)
        uses: docker/build-push-action@v6
        with:
          file: multistage.Dockerfile
          tags: ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha,scope=code-typing-derby
          cache-to: type=gha,mode=min,scope=code-typing-derby
          outputs: type=docker,dest=/tmp/${{ env.IMAGE_NAME }}.tar
      
      - name: Upload artifact (multistage)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}
          path: /tmp/${{ env.IMAGE_NAME }}.tar

  test:
    name: "test image"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Download artifact (multistage)
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}
          path: /tmp

      - name: Load images
        run: |
          docker load --input /tmp/${{ env.IMAGE_NAME }}.tar
          docker image ls -a

      - name: Test Docker compose
        run: |
          docker compose up --watch -d
          docker compose down

      - name: Test command line (multistage)
        run: docker run ${{ env.IMAGE_NAME }}:latest hello

  # deploy:
  #   name: "deploy image"
  #   runs-on: ubuntu-latest
  #   needs: test
  #   # ... deploy to EKS steps ...
  #   steps:

  #     - name: Deploy to EKS
  #       uses: aws-actions/eks-deploy@v1
  #       with:
  #         cluster-name: ${{ env.EKS_CLUSTER_NAME }}
  #         kubeconfig: ${{ env.EKS_KUBECONFIG }}
  #         manifest: /tmp/${{ env.IMAGE_NAME }}.tar
  #       env:
  #         AWS_REGION: ${{ secrets.AWS_REGION }}
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  #         EKS_KUBECONFIG: ${{ secrets.EKS_KUBECONFIG }}